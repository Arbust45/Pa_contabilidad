import tkinter as tk
from tkinter import ttk
import customtkinter
from customtkinter import CTk, CTkLabel, CTkButton, CTkEntry,CTkComboBox

class VentanaPrincipal(CTk):
    global T
    T=0
    def __init__(self):
        super().__init__()
        self.title("Ejemplo de ComboBox y Tr4eeview")

        # Crear ComboBox
        opciones = ["INICIO", "COMPRA", "COSTO DE VENTAS","DEVOLUCION S.C.","DEVOLUCION S.V."]
        self.combobox = CTkComboBox(self, values=opciones)
        self.combobox.pack(pady=10)

        # Crear Treeview
        self.treeview = ttk.Treeview(self, columns=(1, 2, 3, 4, 5, 6, 7, 8), show="headings")
        self.treeview.pack()

        self.treeview.heading(1, text="Entradas")
        self.treeview.heading(2, text="Salidas")
        self.treeview.heading(3, text="Existencias")
        self.treeview.heading(4, text="Costo unitario")
        self.treeview.heading(5, text="Costo promedio")
        self.treeview.heading(6, text="Debe")
        self.treeview.heading(7, text="Haber")
        self.treeview.heading(8, text="Saldo")

        # Crear botón para abrir ventana
        self.btn_abrir_ventana = CTkButton(self, text="Abrir Ventana", command=self.abrir_ventana)
        self.btn_abrir_ventana.pack()
        self.btn_select_theme = CTkButton(self,text="Cambiar color del tema",command=self.Cambiar_tema)
        self.btn_select_theme.pack()

    def abrir_ventana(self):
        seleccion = self.combobox.get()

        if seleccion == "INICIO":
            ventana_opcion1 = VentanaOpcion1(self)
        elif seleccion == "COMPRA":
            ventana_opcion2 = VentanaOpcion2(self)
        elif seleccion == "COSTO DE VENTAS":
            ventana_opcion3 = VentanaOpcion3(self)
        elif seleccion == "DEVOLUCION S.C.":
            ventana_opcion_4 = VentanaOpcion4(self)
        elif seleccion == "DEVOLUCION S.V.":
            ventana_opcion5=VentanaOpcion5(self)
    
    def Cambiar_tema(self):
        global T
        T=T+1
        if T%2!=0:
            customtkinter.set_appearance_mode("light")
        else:
            customtkinter.set_appearance_mode("Dark")




class VentanaOpcion1(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Opción 1")

        # Crear campos de entrada
        self.label_col1 = CTkLabel(self, text="Entradas:",text_color="Black")
        self.label_col1.grid(row=0, column=0, padx=5, pady=5)
        self.entry_col1 = CTkEntry(self)
        self.entry_col1.grid(row=0, column=1, padx=5, pady=5)

        self.label_col4 = CTkLabel(self, text="Costo unitario:",text_color="Black")
        self.label_col4.grid(row=1, column=0, padx=5, pady=5)
        self.entry_col4 = CTkEntry(self)
        self.entry_col4.grid(row=1, column=1, padx=5, pady=5)

        # Crear botón para guardar datos
        self.btn_guardar = CTkButton(self, text="Guardar", command=self.guardar_datos)
        self.btn_guardar.grid(row=2, column=0, columnspan=2, padx=5, pady=5)

    def guardar_datos(self):
        col1 = float(self.entry_col1.get())
        col4 = float(self.entry_col4.get())
        col2 = 0
        col3 = col1
        col5 = 0
        col6 = float(col1) * float(col4)
        col2 = 0
        col3 = col1
        col5 = 0
        col6 = float(col1) * float(col4)
        col7 = 0
        col8 = col6
        # Lógica para obtener col5
        if col3 != "0":
            col5 = float(col8) / float(col3)

        # Agregar datos al Treeview en la ventana principal
        ventana_principal = self.master
        ventana_principal.treeview.insert("", "end", values=(col1, col2, col3, col4, col5, col6, col7, col8))

        self.destroy()


class VentanaOpcion2(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Opción 2")

        # Crear campos de entrada
        self.label_col1 = CTkLabel(self, text="Entradas:",text_color="Black")
        self.label_col1.grid(row=0, column=0, padx=5, pady=5)
        self.entry_col1 = CTkEntry(self)
        self.entry_col1.grid(row=0, column=1, padx=5, pady=5)

        self.label_col4 = CTkLabel(self, text="Costo unitario:",text_color="Black")
        self.label_col4.grid(row=1, column=0, padx=5, pady=5)
        self.entry_col4 = CTkEntry(self)
        self.entry_col4.grid(row=1, column=1, padx=5, pady=5)

        # Crear botón para guardar datos
        self.btn_guardar = CTkButton(self, text="Guardar", command=self.guardar_datos)
        self.btn_guardar.grid(row=2, column=0, columnspan=2, padx=5, pady=5)

    def guardar_datos(self):
        col1 = self.entry_col1.get()
        col4 = self.entry_col4.get()
        col2 = 0
        col3 = float(col1) + float(self.master.treeview.item(self.master.treeview.focus())["values"][2])
        col5 = 0
        col6 = float(col1) * float(col4)
        col7 = 0
        col8 = col6 + float(self.master.treeview.item(self.master.treeview.focus())["values"][7])
        # Lógica para obtener col5
        if col3 != 0:
            col5 = float(col8) / float(col3)

        # Agregar datos al Treeview en la ventana principal
        ventana_principal = self.master
        ventana_principal.treeview.insert("", "end", values=(col1, col2, col3, col4, col5, col6, col7, col8))

        self.destroy()  # Cerrar ventana


class VentanaOpcion3(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Opción 3")

        # Crear campos de entrada
        self.label_col2 = CTkLabel(self, text="Salidas:",text_color="Black")
        self.label_col2.grid(row=0, column=0, padx=5, pady=5)
        self.entry_col2 = CTkEntry(self)
        self.entry_col2.grid(row=0, column=1, padx=5, pady=5)

        # Crear botón para guardar datos
        self.btn_guardar = CTkButton(self, text="Guardar", command=self.guardar_datos)
        self.btn_guardar.grid(row=1, column=0, columnspan=2, padx=5, pady=5)

    def guardar_datos(self):
        col2 = self.entry_col2.get()
        col1 = 0
        col3 = float(self.master.treeview.item(self.master.treeview.focus())["values"][2]) - float(col2)
        col4 = self.master.treeview.item(self.master.treeview.focus())["values"][4]
        col5 = 0
        col6 = 0
        col7 = float(col2) * float(col4)
        col8 = float(self.master.treeview.item(self.master.treeview.focus())["values"][7]) - float(col7)
        # Lógica para obtener col5
        if col3 != 0:
            col5 = float(col8) / float(col3)

        # Agregar datos al Treeview en la ventana principal
        ventana_principal = self.master
        ventana_principal.treeview.insert("", "end", values=(col1, col2, col3, col4, col5, col6, col7, col8))

        self.destroy()

class VentanaOpcion4(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Opción 4")

        # Crear campos de entrada
        self.label_col3 = CTkLabel(self, text="Salidas:",text_color="Black")
        self.label_col3.grid(row=0, column=0, padx=5, pady=5)
        self.entry_col3 = CTkEntry(self)
        self.entry_col3.grid(row=0, column=1, padx=5, pady=5)

        # Crear botón para guardar datos
        self.btn_guardar = CTkButton(self, text="Guardar", command=self.guardar_datos)
        self.btn_guardar.grid(row=1, column=0, columnspan=2, padx=5, pady=5)
        
    def guardar_datos(self):
        col2 = int(self.entry_col3.get())
        col1 = 0
        col3 = float(self.master.treeview.item(self.master.treeview.focus())["values"][2]) - float(col2)
        col4 = self.master.treeview.item(self.master.treeview.focus())["values"][4]
        col5 = 0
        col6 = 0
        col7 = float(col2) * float(col4)
        col8 = float(self.master.treeview.item(self.master.treeview.focus())["values"][7]) - float(col7)
        # Lógica para obtener col5
        if col3 != 0:
            col5 = float(col8) / float(col3)

        # Agregar datos al Treeview en la ventana principal
        ventana_principal = self.master
        ventana_principal.treeview.insert("", "end", values=(col1, col2, col3, col4, col5, col6, col7, col8))

        self.destroy()

class VentanaOpcion5(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Opción 5")

        # Crear campos de entrada
        self.label_col3 = CTkLabel(self, text="Entradas:",text_color="Black")
        self.label_col3.grid(row=0, column=0, padx=5, pady=5)
        self.entry_col3 = CTkEntry(self)
        self.entry_col3.grid(row=0, column=1, padx=5, pady=5)

        # Crear botón para guardar datos
        self.btn_guardar = CTkButton(self, text="Guardar", command=self.guardar_datos)
        self.btn_guardar.grid(row=1, column=0, columnspan=2, padx=5, pady=5)
        
    def guardar_datos(self):
        col1 = int(self.entry_col3.get())
        col2 = 0
        col3 = float(self.master.treeview.item(self.master.treeview.focus())["values"][2]) + float(col1)
        col4 = self.master.treeview.item(self.master.treeview.focus())["values"][4]
        col5 = 0
        col7 = 0
        col6 = float(col1) * float(col4)
        col8 = float(self.master.treeview.item(self.master.treeview.focus())["values"][7]) + float(col6)
        # Lógica para obtener col5
        if col3 != 0:
            col5 = float(col8) / float(col3)

        # Agregar datos al Treeview en la ventana principal
        ventana_principal = self.master
        ventana_principal.treeview.insert("", "end", values=(col1, col2, col3, col4, col5, col6, col7, col8))

        self.destroy()


ventana_principal = VentanaPrincipal()
ventana_principal.mainloop()
